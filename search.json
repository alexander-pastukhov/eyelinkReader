[{"path":"https://alexander-pastukhov.github.io/eyelinkReader/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov (2022). eyelinkReader: Import Preprocess Gaze Data Eyelink Eye Tracker. https://github.com/alexander-pastukhov/eyelinkReader, https://alexander-pastukhov.github.io/eyelinkReader.","code":"@Manual{,   title = {eyelinkReader: Import and Preprocess Gaze Data for Eyelink Eye Tracker},   author = {Alexander Pastukhov},   year = {2022},   note = {https://github.com/alexander-pastukhov/eyelinkReader, https://alexander-pastukhov.github.io/eyelinkReader}, }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"eyelinkreader","dir":"","previous_headings":"","what":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"R package import eye tracking recording generated SR Research Eyelink eye tracker EDF-files. includes options import events /recorded samples extract individual events saccades, fixations, blinks, recorded variables.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"library installation involves three easy (famous last words) steps.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"install-sr-research-eyelink-developers-kit","dir":"","previous_headings":"Installation","what":"Install SR Research EyeLink Developers Kit","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"package relies edfapi library part EyeLink Developers Kit. Therefore, read_edf() function work without still able use utility functions. EyeLink Developers Kit can downloaded sr-support.com website. Note need register wait account activated. Next, follow instructions install EyeLink Developers Kit platform. forum thread SR Support Forum › Downloads › EyeLink Developers Kit / API › Download: EyeLink Developers Kit / API Downloads (Windows, macOS, Linux).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"configure-r-environment-variables","dir":"","previous_headings":"Installation","what":"Configure R environment variables","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"package needs configure compiler flags dependency EDF API library. Specifically, needs specify paths include header files ( edf.h, edf_data.h, edftypes.h) library . package try compile using sensible defaults platform, .e., default installation paths EyeLink Developers Kit v2.1.1. However, defaults may change future may wish install library non-standard location (relevant primarily Windows). compilation default paths fails, need define R environment variables described . variables must defined either user project .Renviron file. simplest way edit via usethis library edit_r_environ() function. Type usethis::edit_r_environ() user usethis::edit_r_environ('project') projects environments (note latter shadows former, read documentation details). case Windows, note need worry forward vs. backward slashes R normalize strings . define variables, restart session check typing Sys.getenv() (see variables) Sys.getenv(\"EDFAPI_INC\") check specific one.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"windows","dir":"","previous_headings":"Installation > Configure R environment variables","what":"Windows","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"Default values assume Eyelink Developers Kit installed c:/Program Files (x86)/SR Research/EyeLink (default installation path). EDFAPI_LIB : path edfapi.dll 32-bit systems. Defaults c:/Program Files (x86)/SR Research/EyeLink/libs. EDFAPI_LIB64 (optional): path edfapi64.dll 64-bit systems. default, 64-bit library x64 subfolder, .e., c:/Program Files (x86)/SR Research/EyeLink/libs/x64. variable optional, package try guess appending /x64 EDFAPI_LIB path. However, specify variable explicitly 64-libraries non-standard folder (SR Research changed , just want sure). EDFAPI_INC : path C header files necessary compilation. Specifically, package requires edf.h, edf_data.h, edftypes.h. Defaults c:/Program Files (x86)/SR Research/EyeLink/Includes/eyelink. .Renviron file include lines similar ones ","code":"EDFAPI_LIB=\"c:/Program Files (x86)/SR Research/EyeLink/libs\" EDFAPI_LIB64=\"c:/Program Files (x86)/SR Research/EyeLink/libs/x64\" EDFAPI_INC=\"c:/Program Files (x86)/SR Research/EyeLink/Includes/eyelink\""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"linux","dir":"","previous_headings":"Installation > Configure R environment variables","what":"Linux","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"EDFAPI_INC : path C header files necessary compilation. Specifically, package requires edf.h, edf_data.h, edftypes.h. Defaults /usr/include/EyeLink. .Renviron file include line like ","code":"EDFAPI_INC=\"/usr/include/EyeLink\""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"mac-os","dir":"","previous_headings":"Installation > Configure R environment variables","what":"Mac OS","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"EDFAPI_LIB: path EDF API framework. Defaults /Library/Frameworks EDFAPI_INC : path C header files necessary compilation. Specifically, package requires edf.h, edf_data.h, edftypes.h. Defaults /Library/Frameworks/edfapi.framework/Headers .Renviron file include lines similar ones ","code":"EDFAPI_LIB=\"/Library/Frameworks\" EDFAPI_INC=\"/Library/Frameworks/edfapi.framework/Headers\""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"install-the-library","dir":"","previous_headings":"Installation","what":"Install the library","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"install github","code":"library(\"devtools\") install_github(\"alexander-pastukhov/eyelinkReader\", dependencies=TRUE)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"main function read_edf() imports EDF file (throws error, EDF API installed). default import events attempt extract standard events: saccades, blinks, fixations, logged variables, etc. Events individual event types stored tables inside eyelinkRecording object package also includes function parse non-standard events: recorded areas interest (extract_AOIs) trigger events help time events (extract_triggers). need called separately. import samples, add import_samples = TRUE , optionally, specify sample attributes need imported, e.g., sample_attributes = c('time', 'gx', 'gy'). attributes imported sample_attributes specified. See package EDF API documentation full list attribute names. Please refer documentation eyelinkRecording class details events samples.","code":"library(eyelinkReader) gaze <- read_edf('eyelink-recording.edf') View(gaze$saccades) gaze <- extract_AOIs(gaze) gaze <- extract_triggers(gaze) # import samples with all attributes gaze <- read_edf('eyelink-recording.edf', import_samples = TRUE)  # import samples with selected attributes gaze <- read_edf('eyelink-recording.edf',                  import_samples = TRUE,                  sample_attributes = c('time', 'gx', 'gy'))"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/index.html","id":"further-information-on-edf-file-content","dir":"","previous_headings":"","what":"Further information on EDF file content","title":"Import and Preprocess Gaze Data for Eyelink Eye Tracker","text":"attempted document package thoroughly . However, question specific attributes please refer EDF API manual Eyelink documentation, supplied SR Research alongside library.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_consistency_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks consistency flag, stops if invalid, returns code if valid. — check_consistency_flag","title":"Checks consistency flag, stops if invalid, returns code if valid. — check_consistency_flag","text":"Checks consistency flag, stops invalid, returns code valid.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_consistency_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks consistency flag, stops if invalid, returns code if valid. — check_consistency_flag","text":"","code":"check_consistency_flag(consistency)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_consistency_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks consistency flag, stops if invalid, returns code if valid. — check_consistency_flag","text":"consistency consistency check control time stamps start end events, etc. 'consistency check' (0), 'check consistency report' (1), 'check consistency fix' (2).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_consistency_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks consistency flag, stops if invalid, returns code if valid. — check_consistency_flag","text":"integer index","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_consistency_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks consistency flag, stops if invalid, returns code if valid. — check_consistency_flag","text":"","code":"check_consistency_flag('no consistency check') #> [1] 0"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_logical_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for validity of a logical flag, stops if not valid — check_logical_flag","title":"Checks for validity of a logical flag, stops if not valid — check_logical_flag","text":"Checks validity logical flag, stops valid","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_logical_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for validity of a logical flag, stops if not valid — check_logical_flag","text":"","code":"check_logical_flag(logical_flag)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_logical_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for validity of a logical flag, stops if not valid — check_logical_flag","text":"logical_flag Logical scalar","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_logical_flag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for validity of a logical flag, stops if not valid — check_logical_flag","text":"logical, value logical_flag","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_logical_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for validity of a logical flag, stops if not valid — check_logical_flag","text":"","code":"import_samples <- TRUE check_logical_flag(import_samples) #> [1] TRUE"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_string_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks for validity of a string parameter, stops if not valid — check_string_parameter","title":"Checks for validity of a string parameter, stops if not valid — check_string_parameter","text":"Checks validity string parameter, stops valid","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_string_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks for validity of a string parameter, stops if not valid — check_string_parameter","text":"","code":"check_string_parameter(string_parameter)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_string_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks for validity of a string parameter, stops if not valid — check_string_parameter","text":"string_parameter String scalar","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_string_parameter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks for validity of a string parameter, stops if not valid — check_string_parameter","text":"character, value string_parameter","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_string_parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks for validity of a string parameter, stops if not valid — check_string_parameter","text":"","code":"start_marker <- \"TRIALID\" check_string_parameter(start_marker) #> [1] \"TRIALID\""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_that_compiled.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether EDF API library was present and\ninterface was successfully be compiled — check_that_compiled","title":"Checks whether EDF API library was present and\ninterface was successfully be compiled — check_that_compiled","text":"Checks whether EDF API library present interface successfully compiled","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_that_compiled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether EDF API library was present and\ninterface was successfully be compiled — check_that_compiled","text":"","code":"check_that_compiled(fail_loudly = TRUE)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_that_compiled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether EDF API library was present and\ninterface was successfully be compiled — check_that_compiled","text":"fail_loudly logical, whether lack compiled library means error (TRUE), just warning (FALSE), silent (NA, test use ).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/check_that_compiled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether EDF API library was present and\ninterface was successfully be compiled — check_that_compiled","text":"","code":"check_that_compiled(fail_loudly = FALSE) #> Warning: No compiled interface to EDF API, function will return NULL. Please see diagnostic messages when package is loading. #> [1] FALSE"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_header_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts integer constants in trial headers to factor with explicit labels — convert_header_codes","title":"Converts integer constants in trial headers to factor with explicit labels — convert_header_codes","text":"Converts integer constants trial headers factor explicit labels. Please refer EDF API manual details.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_header_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts integer constants in trial headers to factor with explicit labels — convert_header_codes","text":"","code":"convert_header_codes(trial_headers)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_header_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts integer constants in trial headers to factor with explicit labels — convert_header_codes","text":"trial_headers data.frame contains trial headers.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_header_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts integer constants in trial headers to factor with explicit labels — convert_header_codes","text":"modified trial_headers table","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_recording_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts integer constants in recordings to factor with explicit labels — convert_recording_codes","title":"Converts integer constants in recordings to factor with explicit labels — convert_recording_codes","text":"Converts integer constants trial recordings information factor explicit labels. Please refer EDF API manual details.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_recording_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts integer constants in recordings to factor with explicit labels — convert_recording_codes","text":"","code":"convert_recording_codes(trial_recordings)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_recording_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts integer constants in recordings to factor with explicit labels — convert_recording_codes","text":"trial_recordings data.frame contains trial recordings.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/convert_recording_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts integer constants in recordings to factor with explicit labels — convert_recording_codes","text":"modified trial_recordings table","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Compiles the library linking it to EDF API — .onLoad","title":"Compiles the library linking it to EDF API — .onLoad","text":"Compiles library linking EDF API","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compiles the library linking it to EDF API — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compiles the library linking it to EDF API — .onLoad","text":"libname character pkgname character","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_AOIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts rectangular areas of interest (AOI) — extract_AOIs","title":"Extracts rectangular areas of interest (AOI) — extract_AOIs","text":"Extracts rectangular areas interest (AOI), defined \"!V IAREA RECTANGLE\" command. Specifically, expect format !V IAREA RECTANGLE <index> <left> <top> <right> <bottom> <label>, <label> string label variables integer. Please note due non-standard nature function called read_edf call need call separately.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_AOIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts rectangular areas of interest (AOI) — extract_AOIs","text":"","code":"extract_AOIs(object)  # S3 method for data.frame extract_AOIs(object)  # S3 method for eyelinkRecording extract_AOIs(object)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_AOIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts rectangular areas of interest (AOI) — extract_AOIs","text":"object Either eyelinkRecording object data.frame events, .e., events slot eyelinkRecording object.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_AOIs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts rectangular areas of interest (AOI) — extract_AOIs","text":"Object time input, .e., either eyelinkRecording object additional AOIs slot data.frame AOIs' information. See eyelinkRecording details.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_AOIs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts rectangular areas of interest (AOI) — extract_AOIs","text":"","code":"if (eyelinkReader::is_compiled()) {     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # by passing the recording     recording <- extract_AOIs(recording)      # by passing events table     AOIs <- extract_AOIs(recording$events) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_blinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract blinks — extract_blinks","title":"Extract blinks — extract_blinks","text":"Extracts blinks events table eyelinkRecording object.. Normally, need call function , called read_edf default settings (e.g., import_blinks = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_blinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract blinks — extract_blinks","text":"","code":"extract_blinks(object)  # S3 method for data.frame extract_blinks(object)  # S3 method for eyelinkRecording extract_blinks(object)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_blinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract blinks — extract_blinks","text":"object Either eyelinkRecording object data.frame events, .e., events slot eyelinkRecording object.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_blinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract blinks — extract_blinks","text":"Object time input, .e., either eyelinkRecording object additional blinks slot data.frame blinks' information. See eyelinkRecording details.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_blinks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract blinks — extract_blinks","text":"","code":"if (eyelinkReader::is_compiled()) {     # blinks are extracted during the initial read_edf call     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_blinks = TRUE)      # blinks are extracted during the initial read_edf call by default     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # blinks are extracted later     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_blinks = FALSE)      # by passing the recording     recording <- extract_blinks(recording)      # by passing events table     recording$blinks <- extract_blinks(recording$events) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_fixations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fixations — extract_fixations","title":"Extract fixations — extract_fixations","text":"Extracts fixations events table eyelinkRecording object. Normally, need call function , called read_edf default settings (e.g., import_fixations = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_fixations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fixations — extract_fixations","text":"","code":"extract_fixations(object)  # S3 method for data.frame extract_fixations(object)  # S3 method for eyelinkRecording extract_fixations(object)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_fixations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fixations — extract_fixations","text":"object Either eyelinkRecording object data.frame events, .e., events slot eyelinkRecording object.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_fixations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fixations — extract_fixations","text":"Object time input, .e., either eyelinkRecording object additional fixations slot data.frame fixations' information. See eyelinkRecording details.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_fixations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fixations — extract_fixations","text":"","code":"if (eyelinkReader::is_compiled()) {     # fixations are extracted during the initial read_edf call     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_fixations = TRUE)      # fixations are extracted during the initial read_edf call by default     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # fixations are extracted later     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_fixations = FALSE)     # by passing the recording     recording <- extract_fixations(recording)      # by passing events table     recording$fixations <- extract_fixations(recording$events) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_saccades.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades from recorded events — extract_saccades","title":"Extract saccades from recorded events — extract_saccades","text":"Extract saccades events table eyelinkRecording object. Normally, need call function , called read_edf default settings (e.g., import_saccades = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_saccades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades from recorded events — extract_saccades","text":"","code":"extract_saccades(object)  # S3 method for data.frame extract_saccades(object)  # S3 method for eyelinkRecording extract_saccades(object)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_saccades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades from recorded events — extract_saccades","text":"object Either eyelinkRecording object data.frame events, .e., events slot eyelinkRecording object.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_saccades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades from recorded events — extract_saccades","text":"Object time input, .e., either eyelinkRecording object additional saccades slot data.frame saccades' information. See eyelinkRecording details.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_saccades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades from recorded events — extract_saccades","text":"","code":"if (eyelinkReader::is_compiled()) {     # saccades are extracted during the initial read_edf call     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_saccades = TRUE)      # saccades are extracted during the initial read_edf call by default     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # saccades are extracted later     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_saccades = FALSE)      # by passing the recording     recording <- extract_saccades(recording)      # by passing events table     saccades <- extract_saccades(recording$events) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_triggers.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract triggers, a custom message type — extract_triggers","title":"Extract triggers, a custom message type — extract_triggers","text":"Extracts trigger events, messages adhere <message_prefix> <label> format. purpose identify time instance specific interest. Please note due non-standard nature function called read_edf call need call separately.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_triggers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract triggers, a custom message type — extract_triggers","text":"","code":"extract_triggers(object, message_prefix = \"TRIGGER\")  # S3 method for data.frame extract_triggers(object, message_prefix = \"TRIGGER\")  # S3 method for eyelinkRecording extract_triggers(object, message_prefix = \"TRIGGER\")"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_triggers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract triggers, a custom message type — extract_triggers","text":"object Either eyelinkRecording object data.frame events, .e., events slot eyelinkRecording object. message_prefix Beginning message string identifies trigger messages. Defaults \"TRIGGER\".","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_triggers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract triggers, a custom message type — extract_triggers","text":"Object time input, .e., either eyelinkRecording object additional triggers slot data.frame triggers' information. See eyelinkRecording details.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_triggers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract triggers, a custom message type — extract_triggers","text":"","code":"if (eyelinkReader::is_compiled()) {     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # by passing the recording     recording <- extract_triggers(recording)      # by passing events table     triggers <- extract_triggers(recording$events) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variables — extract_variables","title":"Extract variables — extract_variables","text":"Extracts variables events table eyelinkRecording object. Normally, need call function , called read_edf default settings (e.g., import_variables = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variables — extract_variables","text":"","code":"extract_variables(object)  # S3 method for data.frame extract_variables(object)  # S3 method for eyelinkRecording extract_variables(object)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variables — extract_variables","text":"object Either eyelinkRecording object data.frame events, .e., events slot eyelinkRecording object.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variables — extract_variables","text":"Object time input, .e., either eyelinkRecording object additional variables slot data.frame variables' information. See eyelinkRecording details.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/extract_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variables — extract_variables","text":"","code":"if (eyelinkReader::is_compiled()) {     # variables are extracted during the initial read_edf call     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_variables = TRUE)      # variables are extracted during the initial read_edf call by default     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # variables are extracted later     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_variables = FALSE)      # by passing the recording     recording <- extract_variables(recording)      # by passing events table     variables <- extract_variables(recording$events) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkReader.html","id":null,"dir":"Reference","previous_headings":"","what":"eyelinkReader — eyelinkReader","title":"eyelinkReader — eyelinkReader","text":"Imports gaze data recorded SR Research Eyelink eye tracker EDF file. Includes options import events /recorded samples extract individual events saccades, fixations, blinks, recorded variables.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class eyelinkRecording. — eyelinkRecording-class","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"S3 class containing information imported edf-file.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"See methods(class = \"eyelinkRecording\") overview available methods.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"preamble preamble recording, see also read_preamble. events Events table collection FEVENT imported EDF file. See description . samples Samples table  collection FSAMPLE imported EDF file. See description . headers Headers individual trials, see description . recordings Individual recording start/end information, see description . display_coords Recorded screen coordinates (recorded). saccades Saccades extracted events, see description . fixations Fixations extracted events, see description . blinks Blinks extracted events, see description . variables Recorded variables extracted events, see description . triggers Events messages adhere TRIGGER <label> format. non-standard message package author uses mark events like onsets offsets, similar done M/EEG. AOIs Areas interest events.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"events","dir":"Reference","previous_headings":"","what":"Events","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Events table collection FEVENT imported EDF file. Column descriptions copied directly  EDF access C API manual. Please refer manual details. Additional non-standard fields marked bold. trial Trial index, starts 1. time Time event. type Event type. read Flags items included. sttime Start time event. entime End time event. sttime_rel Start time event, relative start time trial. entime_rel End time event, relative start time trial. hstx, hsty Head reference starting points. gstx, gsty Gaze starting points. sta Pupil size start. henx, heny Headref ending points. genx, geny Gaze ending points. ena Pupil size end. havx, havy Headref averages. gavx, gavy Gaze averages. ava Average pupil size. avel Accumulated average velocity. pvel Accumulated peak velocity. svel Start velocity. evel End velocity. supd_x, supd_y Start units-per-degree. eupd_x, eupd_y End units-per-degree. eye Either 'LEFT' (1) 'RIGHT' (2). status Error, warning flags. flags Flags indicate contents. input Extra (input word). buttons Button state changes. parsedby 7 bits flags, PARSEDBY codes. message message string.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"samples","dir":"Reference","previous_headings":"","what":"Samples","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Samples table collection FSAMPLE imported EDF file. Please note read_edf parameters determines fields imported. Column descriptions copied directly  EDF access C API manual. Please refer manual details. Suffixes L R denote left right eye. Non-standard additional fields marked bold. trial Trial index, starts 1. time Time sample. time_rel Time relative start trial. pxL, pxR, pyL, pyR Pupil coordinates. hxL, hxR, hyL, hyR Headref coordinates. paL, paR Pupil size area. gxL, gxR, gyL, gyR Screen gaze coordinates. rx, ry Screen pixels per degree. gxvelL, gxvelR, gyvelL, gyvelR Gaze velocity. hxvelL, hxvelR, hyvelL, hyvelR Headref velocity. rxvelL, rxvelR, ryvelL, ryvelR Raw velocity. fgxvelL, fgxvelR, fgyvelL, fgyvelR Fast gaze velocity. fhxvelL, fhxvelR, fhyvelL, fhyvelR Fast headref velocity. frxvelL, frxvelR, fryvelL, fryvelR Fast raw velocity. hdata_1 -hdata_8 Head-tracker data (pre-scaled). column correspond single element INT16 FSAMPLE::hdata[8]. flags Flags indicate contents. input Extra (input word). buttons Button state & changes. htype Head-tracker data type (0=none). errors Process error flags.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"headers","dir":"Reference","previous_headings":"","what":"Headers","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Trial headers table collection TRIAL structures imported EDF file. Column descriptions copied directly  EDF access C API manual. Please refer manual details. fields RECORDINGS structure prefixed rec_. Non-standard additional fields marked bold. trial Trial index. duration Duration trial. starttime Start time trial. endtime End time trial. rec_time Start time end time. rec_sample rate Sample rate Hz: 250, 500, 1000 2000. rec_eflags Extra information events. rec_sflags Extra information samples. rec_state 'START' (2) 'END' (1). rec_record_type 'SAMPLES' (1), 'EVENTS' (2), 'SAMPLES EVENTS' (3). rec_pupil_type 'AREA' (0) 'DIAMETER' (1). rec_recording_mode 'PUPIL' (0) 'CR' (1). rec_filter_type 1, 2, 3. rec_pos_type 'GAZE' (0), 'HREF' (1) 'RAW', currently column kept numeric, since observed values match declared constants. rec_eye 'LEFT' (1), 'RIGHT' (2) 'LEFT RIGHT' (3).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"recordings","dir":"Reference","previous_headings":"","what":"Recordings","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Recordings table collection RECORDING structures imported EDF file. Column descriptions copied directly  EDF access C API manual. Please refer manual details. Non-standard additional fields marked bold. trial Trial index. time Start time end time. sample rate Sample rate Hz: 250, 500, 1000 2000. eflags Extra information events. sflags Extra information samples. state 'START' (2) 'END' (1). record_type 'SAMPLES' (1), 'EVENTS' (2), 'SAMPLES EVENTS' (3). pupil_type 'AREA' (0) 'DIAMETER' (1). recording_mode 'PUPIL' (0) 'CR' (1). filter_type 1, 2, 3. pos_type 'GAZE' (0), 'HREF' (1) 'RAW', currently column kept numeric, since observed values match declared constants. eye 'LEFT' (1), 'RIGHT' (2) 'LEFT RIGHT' (3).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"saccades-and-fixations","dir":"Reference","previous_headings":"","what":"Saccades and Fixations","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Saccades fixations extracted events, tables structure. Column descriptions copied directly  EDF access C API manual. Please refer manual details. Non-standard additional fields marked bold. trial Trial index. sttime Start time. entime End time. sttime_rel Start time, relative start time trial. entime_rel End time, relative start time trial. duration Duration. hstx, hsty Head reference starting points. gstx, gsty Gaze starting points. sta Pupil size start. henx, heny Headref ending points. genx, geny Gaze ending points. ena Pupil size end. havx, havy Headref averages. gavx, gavy Gaze averages. ava Average pupil size. avel Accumulated average velocity. pvel Accumulated peak velocity. svel Start velocity. evel End velocity. supd_x, supd_y Start units-per-degree. eupd_x, eupd_y End units-per-degree. eye Either 'LEFT' (1) 'RIGHT' (2).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"blinks","dir":"Reference","previous_headings":"","what":"Blinks","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Blinks extracted events table. Column descriptions copied directly EDF access C API manual. Please refer manual details. Non-standard additional fields marked bold. trial Trial index. sttime Start time. entime End time. sttime_rel Start time, relative start time trial. entime_rel End time, relative start time trial. duration Duration. eye Either 'LEFT' (1) 'RIGHT' (2).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"variables","dir":"Reference","previous_headings":"","what":"Variables","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"User recorded variables extracted message events 'TRIAL_VAR' prefix. Original format can either 'TRIAL_VAR <name> <value>' 'TRIAL_VAR <name>=<value>'. <name> contain spaces '=' sign. White spaces trimmed <name> <value>. trial Trial index. sttime Start time. sttime_rel Start time, relative start time trial. variable Variable name, <name> part event message. value Variable value, <value> part event message.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"trigger-events","dir":"Reference","previous_headings":"","what":"Trigger events","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Events messages adhere TRIGGER <label> format. non-standard message package author uses mark events like onsets offsets, similar done M/EEG. trial Trial index. sttime Start time. sttime_rel Start time, relative start time trial. label <label> part message, can contain white spaces.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/eyelinkRecording-class.html","id":"aois","dir":"Reference","previous_headings":"","what":"AOIs","title":"Class eyelinkRecording. — eyelinkRecording-class","text":"Rectangular areas interest (AOI), defined \"!V IAREA RECTANGLE\" command. Specifically, expected format !V IAREA RECTANGLE <index> <left> <top> <right> <bottom> <label>. <label> string label variables integer. trial Trial index. sttime Start time. sttime_rel Start time, relative start time trial. index AOI index. left, top, right, bottom AOI coordinates. label AOI label.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/gaze.html","id":null,"dir":"Reference","previous_headings":"","what":"Imported example.edf, events and samples — gaze","title":"Imported example.edf, events and samples — gaze","text":"eyelinkRecording object example.edf, events samples attributes. See eyelinkRecording details.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/gaze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imported example.edf, events and samples — gaze","text":"","code":"gaze"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/gaze.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Imported example.edf, events and samples — gaze","text":"object class eyelinkRecording length 9.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/is_compiled.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether library is compiled and can be used — is_compiled","title":"Determine whether library is compiled and can be used — is_compiled","text":"Determine whether library compiled can used","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/is_compiled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether library is compiled and can be used — is_compiled","text":"","code":"is_compiled()"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/is_compiled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine whether library is compiled and can be used — is_compiled","text":"logical","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/is_compiled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine whether library is compiled and can be used — is_compiled","text":"","code":"is_compiled() #> [1] FALSE"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/logical_index_for_sample_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks validity of sample attribute vector and returns logical indexes. — logical_index_for_sample_attributes","title":"Checks validity of sample attribute vector and returns logical indexes. — logical_index_for_sample_attributes","text":"Checks validity sample attribute vector returns logical indexes.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/logical_index_for_sample_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks validity of sample attribute vector and returns logical indexes. — logical_index_for_sample_attributes","text":"","code":"logical_index_for_sample_attributes(import_samples, sample_attributes)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/logical_index_for_sample_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks validity of sample attribute vector and returns logical indexes. — logical_index_for_sample_attributes","text":"import_samples logical, whether importing requested. sample_attributes character vector names attributes.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/logical_index_for_sample_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks validity of sample attribute vector and returns logical indexes. — logical_index_for_sample_attributes","text":"logical vector","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/logical_index_for_sample_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks validity of sample attribute vector and returns logical indexes. — logical_index_for_sample_attributes","text":"","code":"logical_index_for_sample_attributes(TRUE, c('time', 'gx', 'gy')) #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [25] FALSE FALSE FALSE FALSE"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/print.eyelinkRecording.html","id":null,"dir":"Reference","previous_headings":"","what":"Print info about eyelinkRecording — print.eyelinkRecording","title":"Print info about eyelinkRecording — print.eyelinkRecording","text":"Print info eyelinkRecording","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/print.eyelinkRecording.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print info about eyelinkRecording — print.eyelinkRecording","text":"","code":"# S3 method for eyelinkRecording print(x, ...)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/print.eyelinkRecording.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print info about eyelinkRecording — print.eyelinkRecording","text":"x eyelinkRecording object ... Addition parameters (unused)","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/print.eyelinkRecording.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print info about eyelinkRecording — print.eyelinkRecording","text":"","code":"if (eyelinkReader::is_compiled()) {     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))     print(recording) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_edf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read EDF file with gaze data recorded by SR Research Eyelink eye tracker — read_edf","title":"Read EDF file with gaze data recorded by SR Research Eyelink eye tracker — read_edf","text":"Reads EDF file gaze data recorded SR Research Eyelink eye tracker returns eyelinkRecording object contains events, samples, recordings, well specific events saccades, fixations, blinks, etc.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_edf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read EDF file with gaze data recorded by SR Research Eyelink eye tracker — read_edf","text":"","code":"read_edf(   file,   consistency = \"check consistency and report\",   import_events = TRUE,   import_recordings = TRUE,   import_samples = FALSE,   sample_attributes = NULL,   start_marker = \"TRIALID\",   end_marker = \"TRIAL OK\",   import_saccades = TRUE,   import_blinks = TRUE,   import_fixations = TRUE,   import_variables = TRUE,   verbose = TRUE,   fail_loudly = TRUE )"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_edf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read EDF file with gaze data recorded by SR Research Eyelink eye tracker — read_edf","text":"file full name EDF file consistency consistency check control time stamps start end events, etc. 'consistency check', 'check consistency report' (default), 'check consistency fix'. import_events logical, whether import events, defaults codeTRUE import_recordings logical, whether import information start/end recording, defaults codeTRUE import_samples logical, whether import samples, defaults FALSE. Please note specifyingsample_attributes automatically sets TRUE. sample_attributes character vector lists sample attributes imported. default, attributes imported (default). complete list sample attributes please refer eyelinkRecording EDF API documentation. start_marker event string marks beginning trial. Defaults \"TRIALID\". end_marker event string marks end trial. Defaults \"TRIAL OK\". Please note empty string '' means trial lasts one start_marker till next one. import_saccades logical, whether extract saccade events separate table convenience. Defaults TRUE. import_blinks logical, whether extract blink events separate table convenience. Defaults TRUE. import_fixations logical, whether extract fixation events separate table convenience. Defaults TRUE. import_variables logical, whether extract stored variables separate table convenience. Defaults TRUE. verbose logical, whether number trials progress shown console. Defaults TRUE. fail_loudly logical, whether lack compiled library means error (TRUE, default) just warning (FALSE).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_edf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read EDF file with gaze data recorded by SR Research Eyelink eye tracker — read_edf","text":"eyelinkRecording object contains events, samples, recordings, well specific events saccades, fixations, blinks, etc.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_edf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read EDF file with gaze data recorded by SR Research Eyelink eye tracker — read_edf","text":"","code":"if (eyelinkReader::is_compiled()) {     # Import only events and recordings information     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"))      # Import events and samples (only time and  screen gaze coordinates)     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                       sample_attributes = c('time', 'gx', 'gy'))      # Import events and samples (all attributes)     recording <- read_edf(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\"),                           import_samples= TRUE) }"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_preamble.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads edf-file preamble — read_preamble","title":"Reads edf-file preamble — read_preamble","text":"Read preamble EDF file parses reading-friendly format","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_preamble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads edf-file preamble — read_preamble","text":"","code":"read_preamble(file, fail_loudly = TRUE)"},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_preamble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads edf-file preamble — read_preamble","text":"file name EDF file fail_loudly logical, whether lack compiled library means error (TRUE, default) just warning (FALSE).","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_preamble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads edf-file preamble — read_preamble","text":"character vector added class eyelinkPreamble simplify printing.","code":""},{"path":"https://alexander-pastukhov.github.io/eyelinkReader/reference/read_preamble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads edf-file preamble — read_preamble","text":"","code":"if (eyelinkReader::is_compiled()) {     read_preamble(system.file(\"extdata\", \"example.edf\", package = \"eyelinkReader\")) }"}]
