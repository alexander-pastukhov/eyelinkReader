// ------------------ data structures, as defined in EDF C API user manual ------------------
  typedef struct TRIAL_EVENTS {
    std::vector <unsigned int> trial_index;
    std::vector <UINT32> time;
    std::vector <INT16> type;
    std::vector <UINT16> read;
    std::vector <UINT32> sttime;
    std::vector <UINT32> sttime_rel;
    std::vector <UINT32> entime;
    std::vector <UINT32> entime_rel;
    std::vector <float> hstx;
    std::vector <float> hsty;
    std::vector <float> gstx;
    std::vector <float> gsty;
    std::vector <float> sta;
    std::vector <float> henx;
    std::vector <float> heny;
    std::vector <float> genx;
    std::vector <float> geny;
    std::vector <float> ena;
    std::vector <float> havx;
    std::vector <float> havy;
    std::vector <float> gavx;
    std::vector <float> gavy;
    std::vector <float> ava;
    std::vector <float> avel;
    std::vector <float> pvel;
    std::vector <float> svel;
    std::vector <float> evel;
    std::vector <float> supd_x;
    std::vector <float> eupd_x;
    std::vector <float> supd_y;
    std::vector <float> eupd_y;
    std::vector <INT16> eye;
    std::vector <UINT16> status;
    std::vector <UINT16> flags;
    std::vector <UINT16> input;
    std::vector <UINT16> buttons;
    std::vector <UINT16> parsedby;
    std::vector <std::string> message;
  } TRIAL_EVENTS;


// please note that byte type were replaced with UINT16 for compatibility reasons
typedef struct TRIAL_RECORDINGS{
  std::vector <unsigned int> trial_index;
  std::vector <UINT32> time;
  std::vector <UINT32> time_rel;
  std::vector <float> sample_rate;
  std::vector <UINT16> eflags;
  std::vector <UINT16> sflags;
  std::vector <UINT16> state;
  std::vector <UINT16> record_type;
  std::vector <UINT16> pupil_type;
  std::vector <UINT16> recording_mode;
  std::vector <UINT16> filter_type;
  std::vector <UINT16> pos_type;
  std::vector <UINT16> eye;
} TRIAL_RECORDINGS;

typedef struct TRAIL_SAMPLES{
  std::vector <unsigned int> trial_index;
  std::vector <UINT32> time;
  std::vector <UINT32> time_rel;
  std::vector <float> pxL;
  std::vector <float> pxR;
  std::vector <float> pyL;
  std::vector <float> pyR;
  std::vector <float> hxL;
  std::vector <float> hxR;
  std::vector <float> hyL;
  std::vector <float> hyR;
  std::vector <float> paL;
  std::vector <float> paR;
  std::vector <float> gxL;
  std::vector <float> gxR;
  std::vector <float> gyL;
  std::vector <float> gyR;
  std::vector <float> rx;
  std::vector <float> ry;
  std::vector <float> gxvelL;
  std::vector <float> gxvelR;
  std::vector <float> gyvelL;
  std::vector <float> gyvelR;
  std::vector <float> hxvelL;
  std::vector <float> hxvelR;
  std::vector <float> hyvelL;
  std::vector <float> hyvelR;
  std::vector <float> rxvelL;
  std::vector <float> rxvelR;
  std::vector <float> ryvelL;
  std::vector <float> ryvelR;
  std::vector <float> fgxvelL;
  std::vector <float> fgxvelR;
  std::vector <float> fgyvelL;
  std::vector <float> fgyvelR;
  std::vector <float> fhxvelL;
  std::vector <float> fhxvelR;
  std::vector <float> fhyvelL;
  std::vector <float> fhyvelR;
  std::vector <float> frxvelL;
  std::vector <float> frxvelR;
  std::vector <float> fryvelL;
  std::vector <float> fryvelR;

  std::vector <INT16> hdata_1;
  std::vector <INT16> hdata_2;
  std::vector <INT16> hdata_3;
  std::vector <INT16> hdata_4;
  std::vector <INT16> hdata_5;
  std::vector <INT16> hdata_6;
  std::vector <INT16> hdata_7;
  std::vector <INT16> hdata_8;

  std::vector <UINT16> flags;
  std::vector <UINT16> input;
  std::vector <UINT16> buttons;
  std::vector <INT16> htype;
  std::vector <UINT16> errors;
} TRIAL_SAMPLES;
